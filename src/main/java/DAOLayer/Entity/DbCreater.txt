package DAOLayer;

import View.ViewServlet;

import javax.servlet.ServletContext;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;

public class DbCreater implements DatabaseCreator {

    private static DbCreater instance;
    private static boolean DBisExist = false;
    private static ViewServlet viewServlet;

    public static String getDbName() {
        return dbName;
    }

    //------------------------------------------------------------------
    private static String dbName;
    private static String dbUrl;
    private static String dbUser;
    private static String dbPassword;
    private static String table1Name;
    private static String table2Name;

    //------------------------------------------------------------------

    private static Connection conn = null;
    private static Statement stmt = null;


    private DbCreater(ViewServlet viewServlet) {
        this.viewServlet = viewServlet;
    }
    public static DbCreater getInstance(ViewServlet viewServlet) {
        if (instance == null) {
            instance = new DbCreater(viewServlet);
        }
        return instance;
    }
    //------------------------------------------------------------------------------------------------------------------
    public void setUpDB(){
        if (DBisExist) {
            return;
        }
        try {
            setProps();
            loadJDBCDriver();
            openConnectionToDB();
            createStatementForDB();
            createDB();
            closeConnection();
            openConnectionToSchema();
            createStatementForSchema();
            createTableUsers();
            createTableLinks();
            createTestRowInUsersTable();
            createTestRowInLinksTable();
            DBisExist = true;
        } catch (SQLException e) {
            if(e.getErrorCode() == 1007){
                DBisExist = true;
                System.out.println("База уже существует");
            }else{
                e.printStackTrace();
            }
        } finally {
            closeConnection();
        }
    }
    //------------------------------------------------------------------------------------------------------------------
    private void setProps(){
        Properties props = new Properties();
        ServletContext servletContext = viewServlet.getServletContext();
        String realPath = servletContext.getRealPath("/WEB-INF/props/database.properties");
        try (FileInputStream fis = new FileInputStream(realPath)) {
            props.load(fis);
        } catch (IOException e) {
            //*
            System.out.println("Ошибка при загрузке свойств: " + e.getMessage());
            return;
        }

        dbName = props.getProperty("db.name");
        dbUrl = props.getProperty("db.url");
        dbUser = props.getProperty("db.user");
        dbPassword = props.getProperty("db.password");
        table1Name = props.getProperty("table1.name");
        table2Name = props.getProperty("table2.name");
    }

    private void loadJDBCDriver(){
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void openConnectionToDB(){
        // Open a connection
        try {
            conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
//conn close tut
    private void openConnectionToSchema() throws SQLException {
        // Подключение к базе данных
        String url = dbUrl + dbName;
        conn = DriverManager.getConnection(url, dbUser, dbPassword);
        stmt = conn.createStatement();

    }

    private void createStatementForDB() throws SQLException {
        stmt = conn.createStatement();
        stmt.executeUpdate("SET NAMES utf8");
        stmt.executeUpdate("SET CHARACTER SET utf8");

    }

    private void createStatementForSchema() throws SQLException {
        stmt.executeUpdate("SET NAMES utf8");
        stmt.executeUpdate("SET CHARACTER SET utf8");
        stmt.executeUpdate("SET COLLATION_CONNECTION=utf8_general_ci");

    }

    private void createDB() throws SQLException {
        String sql = "CREATE DATABASE " + dbName + " CHARACTER SET utf8 COLLATE utf8_general_ci";
        stmt.executeUpdate(sql);
        //*
        System.out.println("Database created successfully...");
    }

    private void createTableUsers() throws SQLException {
        // Создание таблицы users
        String createUserTableQuery = "CREATE TABLE " + table1Name + " (" +
                "id BIGINT AUTO_INCREMENT NOT NULL, " +
                "login VARCHAR(45) NOT NULL, " +
                "password VARCHAR(100) NOT NULL, " +
                "PRIMARY KEY (id)) CHARACTER SET utf8 COLLATE utf8_general_ci";
        stmt.executeUpdate(createUserTableQuery);
        System.out.println("Table users created successfully...");
    }

    private void createTableLinks() throws SQLException {
        // Создание таблицы links с изменением поля updated_at
        String createLinkTableQuery = "CREATE TABLE " + table2Name + " (" +
                "id BIGINT AUTO_INCREMENT NOT NULL, " +
                "original_url VARCHAR(1000) NULL, " +
                "short_url VARCHAR(45) NULL, " +
                "created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                "user_id BIGINT NULL, " +
                "PRIMARY KEY (id), " +
                "FOREIGN KEY (user_id) REFERENCES "+ table1Name +"(id)) CHARACTER SET utf8 COLLATE utf8_general_ci";
        stmt.executeUpdate(createLinkTableQuery);
        System.out.println("Table links created successfully...");
    }

    private void createTestRowInUsersTable() throws SQLException {
        // Создание первой тестовой строки в таблице users
        String insertUserQuery = "INSERT INTO " + table1Name + " (login, password) VALUES ('test', 'password')";
        stmt.executeUpdate(insertUserQuery);
        System.out.println("First test user inserted successfully...");
    }

    private void createTestRowInLinksTable() throws SQLException {
        // Получение id первого тестового пользователя
        String selectUserIdQuery = "SELECT id FROM " + table1Name + " WHERE login = 'test'";
        ResultSet rs = stmt.executeQuery(selectUserIdQuery);
        int userId = 0;
        while (rs.next()) {
            userId = rs.getInt("id");
        }
        rs.close();

        // Создание первой тестовой строки в таблице links
        String insertLinkQuery = "INSERT INTO " + table2Name +  "(original_url, short_url, user_id) VALUES ('https://www.example.com', 'example', " + userId + ")";
        stmt.executeUpdate(insertLinkQuery);
        System.out.println("First test link inserted successfully...");
    }

    private void closeConnection(){
        if (conn!= null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public boolean isDBisExist(){
        return DBisExist;
    }
}
